package com.sascom.chickenstock.portfolio.domain.service; import com.sascom.chickenstock.portfolio.api.dto.AccountCompensationEvent; import com.sascom.chickenstock.portfolio.domain.*; import com.sascom.chickenstock.portfolio.infra.repo.*; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; @Slf4j @Service @RequiredArgsConstructor public class PortfolioCompensationService { private final PositionRepository positionRepo; private final FillRecordRepository fillRepo; @Transactional public void compensate(AccountCompensationEvent e){ log.warn("Portfolio compensation for orderId={}, reason={}", e.orderId(), e.reason()); var recOpt=fillRepo.findByOrderIdAndAccountId(e.orderId(), e.accountId()); if(recOpt.isEmpty()){ log.warn("No fill record found for orderId={}, skip", e.orderId()); return; } var rec=recOpt.get(); var posOpt=positionRepo.findByAccountIdAndCompanyId(e.accountId(), e.companyId()); if(posOpt.isPresent()){ var pos=posOpt.get(); if("BUY".equalsIgnoreCase(rec.getSide())) pos.rollbackBuy(rec.getPrice(), rec.getQuantity()); else pos.rollbackSell(rec.getQuantity()); positionRepo.save(pos); } fillRepo.delete(rec); } }