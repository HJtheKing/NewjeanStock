package com.sascom.chickenstock.portfolio.domain.service; import com.sascom.chickenstock.portfolio.api.dto.*; import com.sascom.chickenstock.portfolio.domain.*; import com.sascom.chickenstock.portfolio.infra.repo.*; import lombok.RequiredArgsConstructor; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; @Service @RequiredArgsConstructor public class PortfolioService { private final PositionRepository positionRepo; private final FillRecordRepository fillRepo; @Transactional public PortfolioApplyFillResponse applyFill(PortfolioApplyFillRequest req){ var existed=fillRepo.findByOrderIdAndAccountId(req.orderId(), req.accountId()); if (existed.isPresent()){ var pos=positionRepo.findByAccountIdAndCompanyId(req.accountId(), req.companyId()).orElseThrow(); return new PortfolioApplyFillResponse(req.orderId(), pos.getQuantity(), pos.getAvgPrice()); } var pos=positionRepo.findByAccountIdAndCompanyId(req.accountId(), req.companyId()).orElseGet(()->{ var p=new Position(); p.setAccountId(req.accountId()); p.setCompanyId(req.companyId()); return p; }); if("BUY".equalsIgnoreCase(req.side())) pos.applyBuy(req.price(), req.quantity()); else pos.applySell(req.quantity()); positionRepo.save(pos); fillRepo.save(new FillRecord(null, req.orderId(), req.accountId(), req.companyId(), req.side(), req.price(), req.quantity(), null)); return new PortfolioApplyFillResponse(req.orderId(), pos.getQuantity(), pos.getAvgPrice()); } }