package com.sascom.chickenstock.portfolio.infra.kafka; import com.sascom.chickenstock.portfolio.api.dto.AccountCompensationEvent; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.common.serialization.StringDeserializer; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.*; import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory; import org.springframework.kafka.core.*; import org.springframework.kafka.support.serializer.JsonDeserializer; import java.util.*; @Configuration public class KafkaConsumerConfig { @Value("${spring.kafka.bootstrap-servers}") private String bootstrap; @Bean public ConsumerFactory<String, AccountCompensationEvent> accountCompConsumerFactory(){ Map<String,Object> props=new HashMap<>(); props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrap); props.put(ConsumerConfig.GROUP_ID_CONFIG, "portfolio-service"); props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest"); JsonDeserializer<AccountCompensationEvent> jd=new JsonDeserializer<>(AccountCompensationEvent.class); jd.addTrustedPackages("*"); return new DefaultKafkaConsumerFactory<>(props, new StringDeserializer(), jd); } @Bean public ConcurrentKafkaListenerContainerFactory<String, AccountCompensationEvent> accountCompKafkaFactory(){ var f=new ConcurrentKafkaListenerContainerFactory<String, AccountCompensationEvent>(); f.setConsumerFactory(accountCompConsumerFactory()); return f; } }